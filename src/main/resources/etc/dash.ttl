# baseURI: http://datashapes.org/dash
# imports: http://topbraid.org/tosh
# imports: http://www.w3.org/ns/shacl#
# prefix: dash

@prefix dash: <http://datashapes.org/dash#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://datashapes.org/dash>
  rdf:type owl:Ontology ;
  rdfs:comment """DASH defines a standard SPARQL implementation of SHACL which is (among others) utilized by TopBraid and its API.

DASH is also a SHACL library for frequently needed features and design patterns. All features in this library are 100% standards compliant and will work on any engine that fully supports SHACL.""" ;
  rdfs:label "DASH Data Shapes Library" ;
  owl:imports <http://topbraid.org/tosh> ;
  owl:imports sh: ;
  sh:declare [
      sh:namespace "http://datashapes.org/dash#"^^xsd:anyURI ;
      sh:prefix "dash" ;
    ] ;
  sh:declare [
      sh:namespace "http://purl.org/dc/terms/"^^xsd:anyURI ;
      sh:prefix "dcterms" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
      sh:prefix "rdf" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
      sh:prefix "rdfs" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI ;
      sh:prefix "xsd" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/2002/07/owl#"^^xsd:anyURI ;
      sh:prefix "owl" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/2004/02/skos/core#"^^xsd:anyURI ;
      sh:prefix "skos" ;
    ] ;
.
dash:AllObjects
  rdf:type dash:AllObjectsTarget ;
  rdfs:comment "A reusable instance of dash:AllObjectsTarget." ;
  rdfs:label "All objects" ;
.
dash:AllObjectsTarget
  rdf:type sh:SPARQLTargetType ;
  rdfs:comment "A target containing all objects in the data graph as focus nodes." ;
  rdfs:label "All objects target" ;
  rdfs:subClassOf sh:Target ;
  sh:labelTemplate "All objects" ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:select """SELECT DISTINCT ?this
WHERE {
    ?anyS ?anyP ?this .
}""" ;
.
dash:AllSubjects
  rdf:type dash:AllSubjectsTarget ;
  rdfs:comment "A reusable instance of dash:AllSubjectsTarget." ;
  rdfs:label "All subjects" ;
.
dash:AllSubjectsTarget
  rdf:type sh:SPARQLTargetType ;
  rdfs:comment "A target containing all subjects in the data graph as focus nodes." ;
  rdfs:label "All subjects target" ;
  rdfs:subClassOf sh:Target ;
  sh:labelTemplate "All subjects" ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:select """SELECT DISTINCT ?this
WHERE {
    ?this ?anyP ?anyO .
}""" ;
.
dash:DateOrDateTime
  rdf:type rdf:List ;
  rdf:first xsd:date ;
  rdf:rest (
      xsd:dateTime
    ) ;
  rdfs:comment "An rdf:List that can be used in property constraints as value for sh:or to indicate that all values of a property must be either xsd:date or xsd:dateTime." ;
  rdfs:label "Date or date time" ;
.
dash:DefaultValueTypeRule
  rdf:type sh:SPARQLConstructExecutable ;
  rdfs:comment """
		A resource encapsulating a query that can be used to construct rdf:type triples for certain untyped nodes
		that are an object in a triple where the predicate has a sh:defaultValueType.
		This can be used as a pre-processor for shape graphs before they are validated.
		"""^^rdf:HTML ;
  rdfs:label "default value type inference rule" ;
  sh:construct """
		CONSTRUCT {
			?node a ?defaultValueType .
		}
		WHERE {
			?predicate sh:defaultValueType ?defaultValueType .
			?anySubject ?predicate ?node .
			FILTER (NOT EXISTS { ?node a ?anyType }) .
		}
		""" ;
.
dash:FailureResult
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "A result representing a validation failure such as an unsupported recursion." ;
  rdfs:label "Failure result" ;
  rdfs:subClassOf sh:AbstractResult ;
.
dash:FailureTestCaseResult
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "Represents a failure of a test case." ;
  rdfs:label "Failure test case result" ;
  rdfs:subClassOf dash:TestCaseResult ;
.
dash:FunctionTestCase
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "A test case that verifies that a given SPARQL expression produces a given, expected result." ;
  rdfs:label "Function test case" ;
  rdfs:subClassOf dash:TestCase ;
  sh:property [
      sh:predicate dash:expectedResult ;
      sh:description "The expected result of a function call." ;
      sh:maxCount 1 ;
      sh:name "expected result" ;
    ] ;
  sh:property [
      sh:predicate dash:expression ;
      sh:description "A valid SPARQL expression calling the function to test." ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "expression" ;
    ] ;
.
dash:GraphUpdate
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:label "Graph update" ;
  rdfs:subClassOf dash:Suggestion ;
.
dash:GraphValidationTestCase
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "A test case that performs SHACL constraint validation on the whole graph and compares the results with the expected validation results stored with the test case." ;
  rdfs:label "Graph validation test case" ;
  rdfs:subClassOf dash:ValidationTestCase ;
.
dash:InferencingTestCase
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "A test case to verify whether an inferencing engine is producing identical results to those stored as expected results." ;
  rdfs:label "Inferencing test case" ;
  rdfs:subClassOf dash:TestCase ;
  sh:property [
      sh:predicate dash:expectedResult ;
      sh:description "The expected inferred triples, represented by instances of rdfs:Statement." ;
      sh:name "expected result" ;
    ] ;
.
dash:MemberShapeConstraintComponent
  rdf:type sh:ConstraintComponent ;
  rdfs:comment "Can be used to specify constraints on the members of a given list, assuming that the given sh:property has rdf:Lists as values. A violation is reported for each member of the list that does not comply with the constraints specified by the given shape." ;
  rdfs:label "Member shape constraint component" ;
  sh:parameter dash:MemberShapeConstraintComponent-memberShape ;
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "List member {?member} does not have the shape {$memberShape}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value ?failure ?member
		WHERE {
			$this $PATH ?value .
			?value rdf:rest*/rdf:first ?member .
			BIND (sh:hasShape(?member, $memberShape, $shapesGraph) AS ?hasShape) .
			BIND (!bound(?hasShape) AS ?failure) .
			FILTER (?failure || !?hasShape) .
		}
""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
dash:MemberShapeConstraintComponent-memberShape
  rdf:type sh:Parameter ;
  sh:predicate dash:memberShape ;
  sh:class sh:Shape ;
  sh:description "The shape that the list members must have." ;
  sh:name "member shape" ;
.
dash:NonRecursiveConstraintComponent
  rdf:type sh:ConstraintComponent ;
  rdfs:comment """Used to state that a property or path must not point back to itself.

For example, \"a person cannot have itself as parent\" can be expressed by setting dash:nonRecursive=true for a given sh:predicate.

To express that a person cannot have itself among any of its (recursive) parents, use a sh:path with the + operator such as ex:parent+.""" ;
  rdfs:label "Non-recursive constraint component" ;
  sh:parameter dash:NonRecursiveConstraintComponent-nonRecursive ;
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Points back at itself (recursively)" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """SELECT $this ($this AS ?value)
WHERE {
	{
		FILTER (?nonRecursive)
	}
    $this $PATH $this .
}""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
dash:NonRecursiveConstraintComponent-nonRecursive
  rdf:type sh:Parameter ;
  sh:predicate dash:nonRecursive ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:name "non-recursive" ;
.
dash:None
  rdf:type sh:Shape ;
  rdfs:comment "A Shape that is violated for every possible focus node. This can be used in sh:filterShape statements to essentially deactivate other shapes or constraints." ;
  rdfs:label "None" ;
  sh:in () ;
.
dash:PrimaryKeyConstraintComponent
  rdf:type sh:ConstraintComponent ;
  rdfs:comment "Enforces a constraint that the given property (sh:predicate) serves as primary key for all resources in the target of the shape. If a property has been declared to be the primary key then each resource must have exactly one value for that property. Furthermore, the URIs of those resources must start with a given string (dash:uriStart), followed by the URL-encoded primary key value. For example if dash:uriStart is \"http://example.org/country-\" and the primary key for an instance is \"de\" then the URI must be \"http://example.org/country-de\". Finally, as a result of the URI policy, there can not be any other resource with the same value under the same primary key policy." ;
  rdfs:label "Primary key constraint component" ;
  sh:labelTemplate "The property {?predicate} is the primary key and URIs start with {?uriStart}" ;
  sh:parameter dash:PrimaryKeyConstraintComponent-uriStart ;
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """SELECT $this ?value ?message
WHERE {
    {
        FILTER NOT EXISTS {
            ?this $PATH ?any .
        } .
        BIND (\"Missing value for primary key property\" AS ?message) .
    }
    UNION
    {
        FILTER EXISTS {
			?this $PATH ?value1 .
			?this $PATH ?value2 .
			FILTER (?value1 != ?value2) .
		}
        BIND (\"Multiple values of primary key property\" AS ?message) .
    }
    UNION
    {
		{
        	?this $PATH ?value .
			FILTER NOT EXISTS { ?this $PATH ?value2 . FILTER (?value != ?value2) }
		}
        BIND (CONCAT($uriStart, ENCODE_FOR_URI(str(?value))) AS ?uri) .
        FILTER (str(?this) != ?uri) .
        BIND (CONCAT(\"Primary key value \", str(?value), \" does not align with the expected URI \", ?uri) AS ?message) .
    } .
}""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
dash:PrimaryKeyConstraintComponent-uriStart
  rdf:type sh:Parameter ;
  sh:predicate dash:uriStart ;
  sh:datatype xsd:string ;
  sh:description "The start of the URIs of well-formed resources." ;
  sh:name "URI start" ;
.
dash:QueryTestCase
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "A test case running a given SPARQL SELECT query and comparing its results with those stored as JSON Result Set in the expected result property." ;
  rdfs:label "Query test case" ;
  rdfs:subClassOf dash:TestCase ;
  sh:property [
      sh:predicate dash:expectedResult ;
      sh:datatype xsd:string ;
      sh:description "The expected result set, as a JSON string." ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "expected result" ;
    ] ;
  sh:property [
      sh:predicate sh:select ;
      sh:datatype xsd:string ;
      sh:description "The SPARQL SELECT query to execute." ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "SPARQL query" ;
    ] ;
.
dash:RootClassConstraintComponent
  rdf:type sh:ConstraintComponent ;
  rdfs:comment "A constraint component defining the parameter dash:rootClass, which restricts the values to be either the root class itself or one of its subclasses. This is typically used in conjunction with properties that have rdfs:Class as their type." ;
  rdfs:label "Root class constraint component" ;
  sh:labelTemplate "Root class {$rootClass}" ;
  sh:parameter dash:RootClassConstraintComponent-rootClass ;
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasRootClass ;
.
dash:RootClassConstraintComponent-rootClass
  rdf:type sh:Parameter ;
  sh:predicate dash:rootClass ;
  sh:class rdfs:Class ;
  sh:description "The root class." ;
  sh:name "root class" ;
  sh:nodeKind sh:IRI ;
.
dash:SPARQLUpdateSuggestionGenerator
  rdf:type rdfs:Class ;
  rdfs:comment """A SuggestionGenerator based on a SPARQL UPDATE query (sh:update), producing an instance of dash:GraphUpdate. The INSERTs become dash:addedTriple and the DELETEs become dash:deletedTriple. The WHERE clause operates on the data graph with the pre-bound variables $subject, $predicate and $object, as well as the other pre-bound variables for the parameters of the constraint.

In many cases, there may be multiple possible suggestions to fix a problem. For example, with sh:maxLength there are many ways to slice a string. In those cases, the system will first iterate through the result variables from a SELECT query (sh:select) and apply these results as pre-bound variables into the UPDATE query.""" ;
  rdfs:label "SPARQL UPDATE suggestion generator" ;
  rdfs:subClassOf dash:SuggestionGenerator ;
  rdfs:subClassOf sh:SPARQLSelectExecutable ;
  rdfs:subClassOf sh:SPARQLUpdateExecutable ;
.
dash:StringOrLangString
  rdf:type rdf:List ;
  rdf:first xsd:string ;
  rdf:rest (
      rdf:langString
    ) ;
  rdfs:comment "An rdf:List that can be used in property constraints as value for sh:or to indicate that all values of a property must be either xsd:string or rdf:langString." ;
  rdfs:label "String or langString" ;
.
dash:SuccessResult
  rdf:type rdfs:Class ;
  rdfs:comment "A result representing a successfully validated constraint." ;
  rdfs:label "Success result" ;
  rdfs:subClassOf sh:AbstractResult ;
.
dash:SuccessTestCaseResult
  rdf:type rdfs:Class ;
  rdfs:comment "Represents a successful run of a test case." ;
  rdfs:label "Success test case result" ;
  rdfs:subClassOf dash:TestCaseResult ;
.
dash:Suggestion
  rdf:type rdfs:Class ;
  rdfs:comment "Base class of suggestions that modify a graph to \"fix\" the source of a validation result." ;
  rdfs:label "Suggestion" ;
  rdfs:subClassOf rdfs:Resource ;
.
dash:SuggestionGenerator
  rdf:type rdfs:Class ;
  rdfs:comment "Base class of objects that can generate suggestions (added or deleted triples) for a validation result of a given constraint component." ;
  rdfs:label "Suggestion generator" ;
  rdfs:subClassOf rdfs:Resource ;
.
dash:TestCase
  rdf:type rdfs:Class ;
  dash:abstract "true"^^xsd:boolean ;
  rdfs:comment "A test case to verify that a (SHACL-based) feature works as expected." ;
  rdfs:label "Test case" ;
  rdfs:subClassOf rdfs:Resource ;
.
dash:TestCaseResult
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  rdfs:comment "Base class for results produced by running test cases." ;
  rdfs:label "Test case result" ;
  rdfs:subClassOf sh:AbstractResult ;
  sh:property [
      sh:predicate dash:testCase ;
      sh:class dash:TestCase ;
      sh:description "The dash:TestCase that was executed." ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "test case" ;
    ] ;
  sh:property [
      sh:predicate dash:testGraph ;
      sh:class rdfs:Resource ;
      sh:description "The graph containing the test case." ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "test graph" ;
      sh:nodeKind sh:IRI ;
    ] ;
.
dash:ValidationTestCase
  rdf:type rdfs:Class ;
  rdf:type sh:Shape ;
  dash:abstract "true"^^xsd:boolean ;
  rdfs:comment "Abstract superclass for test cases concerning SHACL constraint validation. Future versions may add new kinds of validatin test cases, e.g. to validate a single resource only." ;
  rdfs:label "Validation test case" ;
  rdfs:subClassOf dash:TestCase ;
  sh:property [
      sh:predicate dash:expectedResult ;
      sh:class sh:AbstractResult ;
      sh:description "The expected validation results." ;
      sh:name "expected result" ;
    ] ;
.
dash:abstract
  rdf:type rdf:Property ;
  rdfs:comment "Indicates that a class is \"abstract\" and cannot be used in asserted rdf:type triples. Only non-abstract subclasses of abstract classes should be instantiated directly." ;
  rdfs:domain rdfs:Class ;
  rdfs:label "abstract" ;
  rdfs:range xsd:boolean ;
.
dash:addedTriple
  rdf:type rdf:Property ;
  rdfs:comment "May link a dash:GraphUpdate with one or more triples (represented as instances of rdf:Statement) that should be added to fix the source of the result." ;
  rdfs:domain dash:GraphUpdate ;
  rdfs:label "added triple" ;
  rdfs:range rdf:Statement ;
.
dash:countShapesWithMatchResult
  rdf:type sh:SPARQLFunction ;
  rdfs:comment "Counts the number of shapes from a given rdf:List (?arg2) defined in a given shapes graph (?arg3) where sh:hasShape returns the provided match value (true or false, ?arg4) for a given focus node (?arg1). The function produces a failure if one of the shapes validated to a failure." ;
  rdfs:label "count shapes with match result" ;
  sh:parameter [
      sh:predicate sh:expectedValue ;
      sh:datatype xsd:boolean ;
      sh:description "The expected value of sh:hasShape to count." ;
      sh:order 3 ;
    ] ;
  sh:parameter [
      sh:predicate sh:focusNode ;
      sh:class rdfs:Resource ;
      sh:description "The focus node." ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      sh:predicate sh:shapes ;
      sh:class rdf:List ;
      sh:description "The list of shapes to walk through." ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      sh:predicate sh:shapesGraph ;
      sh:class rdfs:Resource ;
      sh:description "The shapes graph." ;
      sh:order 2 ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:integer ;
  sh:select """
		# The SUM will fail with an error if one of the operands is not a number
		# (this mechanism is used to propagate errors from sh:hasShape calls)
		SELECT (SUM(?s) AS ?result)
		WHERE {
			GRAPH $shapesGraph {
				$shapes rdf:rest*/rdf:first ?shape .
			}
			BIND (sh:hasShape($focusNode, ?shape, $shapesGraph, true) AS ?hasShape) .
			BIND (IF(bound(?hasShape), IF(?hasShape = $expectedValue, 1, 0), 'error') AS ?s) .
		}
		""" ;
.
dash:defaultValueType
  rdf:type rdf:Property ;
  rdfs:comment """
		Links a property with a default value type.
		The default value type is assumed to be the <code>rdf:type</code> of values of the property
		that declare no type on their own.
		An example use of <code>sh:defaultValueType</code> is <code>sh:property</code>,
		the values of which are assumed to be instances of <code>sh:PropertyConstraint</code>
		even if they are untyped (blank) nodes.
		"""^^rdf:HTML ;
  rdfs:domain rdf:Property ;
  rdfs:label "default value type" ;
  rdfs:range rdfs:Class ;
  owl:versionInfo "Note this property may get removed in future versions. It is a left-over from a previous design in SHACL." ;
.
dash:deletedTriple
  rdf:type rdf:Property ;
  rdfs:comment "May link a dash:GraphUpdate result with one or more triples (represented as instances of rdf:Statement) that should be deleted to fix the source of the result." ;
  rdfs:domain dash:GraphUpdate ;
  rdfs:label "deleted triple" ;
  rdfs:range rdf:Statement ;
.
dash:hasClass
  rdf:type sh:SPARQLAskValidator ;
  rdfs:label "has class" ;
  sh:ask """
		ASK {
			$value rdf:type/rdfs:subClassOf* $class .
		}
		""" ;
  sh:message "Value does not have class {$class}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasDatatype
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node ($value) is a literal with a given datatype ($datatype)." ;
  rdfs:label "has datatype" ;
  sh:ask """
		ASK {
			FILTER (datatype($value) = $datatype) .
		}
		""" ;
  sh:message "Value does not have datatype {$datatype}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasMaxExclusive
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node (?value) has value less than (<) the provided ?maxExclusive. Returns false if this cannot be determined, e.g. because values do not have comparable types." ;
  rdfs:label "has max exclusive" ;
  sh:ask "ASK { FILTER ($value < $maxExclusive) }" ;
  sh:message "Value is not < {$maxExclusive}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasMaxInclusive
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node (?value) has value less than or equal to (<=) the provided ?maxInclusive. Returns false if this cannot be determined, e.g. because values do not have comparable types." ;
  rdfs:label "has max inclusive" ;
  sh:ask "ASK { FILTER ($value <= $maxInclusive) }" ;
  sh:message "Value is not <= {$maxInclusive}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasMaxLength
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given string (?value) has a length within a given maximum string length." ;
  rdfs:label "has max length" ;
  sh:ask """
		ASK {
			FILTER (STRLEN(str($value)) <= $maxLength) .
		}
		""" ;
  sh:message "Value has more than {$maxLength} characters" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasMinExclusive
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node (?value) has value greater than (>) the provided ?minExclusive. Returns false if this cannot be determined, e.g. because values do not have comparable types." ;
  rdfs:label "has min exclusive" ;
  sh:ask "ASK { FILTER ($value > $minExclusive) }" ;
  sh:message "Value is not > {$minExclusive}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasMinInclusive
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node (?value) has value greater than or equal to (>=) the provided ?minInclusive. Returns false if this cannot be determined, e.g. because values do not have comparable types." ;
  rdfs:label "has min inclusive" ;
  sh:ask "ASK { FILTER ($value >= $minInclusive) }" ;
  sh:message "Value is not >= {$minInclusive}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasMinLength
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given string (?value) has a length within a given minimum string length." ;
  rdfs:label "has min length" ;
  sh:ask """
		ASK {
			FILTER (STRLEN(str($value)) >= $minLength) .
		}
		""" ;
  sh:message "Value has less than {$minLength} characters" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasNodeKind
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node (?value) has a given sh:NodeKind (?nodeKind). For example, sh:hasNodeKind(42, sh:Literal) = true." ;
  rdfs:label "has node kind" ;
  sh:ask """
		ASK {
			FILTER ((isIRI($value) && $nodeKind IN ( sh:IRI, sh:BlankNodeOrIRI, sh:IRIOrLiteral ) ) ||
				(isLiteral($value) && $nodeKind IN ( sh:Literal, sh:BlankNodeOrLiteral, sh:IRIOrLiteral ) ) ||
				(isBlank($value)   && $nodeKind IN ( sh:BlankNode, sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral ) )) .
		}
		""" ;
  sh:message "Value has not node kind {$nodeKind}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasPattern
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether the string representation of a given node (?value) matches a given regular expression (?pattern). Returns false if the value is a blank node." ;
  rdfs:label "has pattern" ;
  sh:ask "ASK { FILTER (!isBlank($value) && IF(bound($flags), regex(str($value), $pattern, $flags), regex(str($value), $pattern))) }" ;
  sh:message "Value does not match pattern \"{$pattern}\"" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasRootClass
  rdf:type sh:SPARQLAskValidator ;
  rdfs:label "has root class" ;
  sh:ask """ASK {
    $value rdfs:subClassOf* $rootClass .
}""" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:hasStem
  rdf:type sh:SPARQLAskValidator ;
  rdfs:comment "Checks whether a given node is an IRI starting with a given stem." ;
  rdfs:label "has stem" ;
  sh:ask "ASK { FILTER (isIRI($value) && STRSTARTS(str($value), $stem)) }" ;
  sh:message "Value does not have stem {$stem}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:isDeactivated
  rdf:type sh:SPARQLFunction ;
  rdfs:comment "Checks whether a given shape or constraint has been marked as \"deactivated\". This relies on the coding convention to have sh:filterShape dash:None." ;
  sh:ask """ASK {
    ?constraintOrShape sh:filterShape dash:None .
}""" ;
  sh:parameter [
      sh:predicate dash:constraintOrShape ;
      sh:description "The sh:Constraint or sh:Shape to test." ;
      sh:name "constraint or shape" ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:boolean ;
.
dash:isIn
  rdf:type sh:SPARQLAskValidator ;
  sh:ask """
		ASK {
			GRAPH $shapesGraph {
				$in (rdf:rest*)/rdf:first $value .
			}
		}
		""" ;
  sh:message "Value is not in {$in}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:isLanguageIn
  rdf:type sh:SPARQLAskValidator ;
  rdfs:label "is language in" ;
  sh:ask """
		ASK {
			BIND (lang($value) AS ?valueLang) .
			FILTER (bound(?valueLang) && EXISTS {
				GRAPH $shapesGraph {
					$languageIn (rdf:rest*)/rdf:first ?lang .
				    FILTER (langMatches(?valueLang, ?lang))
				} } )
		}
		""" ;
  sh:message "Language does not match any of {$languageIn}" ;
  sh:prefixes <http://datashapes.org/dash> ;
.
dash:isNodeKindBlankNode
  rdf:type sh:SPARQLFunction ;
  dash:cachable "true"^^xsd:boolean ;
  rdfs:comment "Checks if a given sh:NodeKind is one that includes BlankNodes." ;
  rdfs:label "is NodeKind BlankNode" ;
  sh:ask """ASK {
	FILTER ($nodeKind IN ( sh:BlankNode, sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral ))
}""" ;
  sh:parameter [
      sh:predicate dash:nodeKind ;
      sh:class sh:NodeKind ;
      sh:description "The sh:NodeKind to check." ;
      sh:name "node kind" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:boolean ;
.
dash:isNodeKindIRI
  rdf:type sh:SPARQLFunction ;
  dash:cachable "true"^^xsd:boolean ;
  rdfs:comment "Checks if a given sh:NodeKind is one that includes IRIs." ;
  rdfs:label "is NodeKind IRI" ;
  sh:ask """ASK {
	FILTER ($nodeKind IN ( sh:IRI, sh:BlankNodeOrIRI, sh:IRIOrLiteral ))
}""" ;
  sh:parameter [
      sh:predicate dash:nodeKind ;
      sh:class sh:NodeKind ;
      sh:description "The sh:NodeKind to check." ;
      sh:name "node kind" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:boolean ;
.
dash:isNodeKindLiteral
  rdf:type sh:SPARQLFunction ;
  dash:cachable "true"^^xsd:boolean ;
  rdfs:comment "Checks if a given sh:NodeKind is one that includes Literals." ;
  rdfs:label "is NodeKind Literal" ;
  sh:ask """ASK {
	FILTER ($nodeKind IN ( sh:Literal, sh:BlankNodeOrLiteral, sh:IRIOrLiteral ))
}""" ;
  sh:parameter [
      sh:predicate dash:nodeKind ;
      sh:class sh:NodeKind ;
      sh:description "The sh:NodeKind to check." ;
      sh:name "node kind" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:boolean ;
.
dash:propertySuggestionGenerator
  rdf:type rdf:Property ;
  rdfs:comment "Links the constraint component with instances of dash:SuggestionGenerator that may be used to produce suggestions for a given validation result that was produced by a property constraint." ;
  rdfs:domain sh:ConstraintComponent ;
  rdfs:label "property suggestion generator" ;
  rdfs:range dash:SuggestionGenerator ;
.
dash:rootClass
  rdf:type rdf:Property ;
  rdfs:label "root class" ;
.
dash:suggestion
  rdf:type rdf:Property ;
  rdfs:comment "Can be used to link a validation result with one or more suggestions on how to fix the underlying issue." ;
  rdfs:domain sh:ValidationResult ;
  rdfs:label "suggestion" ;
  rdfs:range dash:Suggestion ;
.
dash:suggestionGenerator
  rdf:type rdf:Property ;
  rdfs:comment "Links a sh:SPARQLConstraint with instances of dash:SuggestionGenerator that may be used to produce suggestions for a given validation result that was produced by the constraint." ;
  rdfs:domain sh:SPARQLConstraint ;
  rdfs:label "suggestion generator" ;
  rdfs:range dash:SuggestionGenerator ;
.
dash:valueCount
  rdf:type sh:SPARQLFunction ;
  rdfs:comment "Computes the number of objects for a given subject/predicate combination." ;
  rdfs:label "value count" ;
  sh:parameter [
      sh:predicate dash:predicate ;
      sh:class rdfs:Resource ;
      sh:description "The predicate to get the number of objects of." ;
      sh:name "predicate" ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      sh:predicate dash:subject ;
      sh:class rdfs:Resource ;
      sh:description "The subject to get the number of objects of." ;
      sh:name "subject" ;
      sh:order 0 ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:integer ;
  sh:select """
		SELECT (COUNT(?object) AS ?result)
		WHERE {
    		$subject $predicate ?object .
		}
""" ;
.
dash:valuesWithShapeCount
  rdf:type sh:SPARQLFunction ;
  rdfs:comment "Counts the number of values from a given subject (?arg1) / predicate (?arg2) combination that do not produce any error-level constraint violations for a given shape (?arg3) in a given shapes graph (?arg4). The function produces an error if one of the shapes validated to a fatal error." ;
  rdfs:label "values with shape count" ;
  sh:parameter [
      sh:predicate sh:arg1 ;
      sh:class rdfs:Resource ;
      sh:description "The subject to count the values of." ;
    ] ;
  sh:parameter [
      sh:predicate sh:arg2 ;
      sh:class rdf:Property ;
      sh:description "The property to count the values of." ;
    ] ;
  sh:parameter [
      sh:predicate sh:arg3 ;
      sh:class sh:Shape ;
      sh:description "The shape to validate." ;
    ] ;
  sh:parameter [
      sh:predicate sh:arg4 ;
      sh:class rdfs:Resource ;
      sh:description "The shapes graph." ;
    ] ;
  sh:prefixes <http://datashapes.org/dash> ;
  sh:returnType xsd:integer ;
  sh:select """
		# The SUM will fail with an error if one of the operands is not a number
		# (this mechanism is used to propagate errors from sh:hasShape calls)
		SELECT (SUM(?s) AS ?result)
		WHERE {
			{
				FILTER NOT EXISTS { $arg1 $arg2 ?value }
				BIND (0 AS ?s)
			}
			UNION {
				FILTER EXISTS { $arg1 $arg2 ?value }
				$arg1 $arg2 ?value .
				BIND (sh:hasShape(?value, $arg3, $arg4, true) AS ?hasShape) .
				BIND (IF(bound(?hasShape), IF(?hasShape, 1, 0), 'error') AS ?s) .
			}
		}
		""" ;
.
owl:Class
  rdf:type rdfs:Class ;
  rdfs:subClassOf rdfs:Class ;
.
sh:AndConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value ?failure
		WHERE {
			$this $PATH ?value .
			BIND (dash:countShapesWithMatchResult(?value, $and, $shapesGraph, false) AS ?count)
			BIND (!bound(?count) AS ?failure) .
			FILTER IF(?failure, true, ?count > 0) .
		}
""" ;
    ] ;
  sh:shapeValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?failure
		WHERE {
			BIND (dash:countShapesWithMatchResult($this, $and, $shapesGraph, false) AS ?count)
			BIND (!bound(?count) AS ?failure) .
			FILTER IF(?failure, true, ?count > 0) .
		}
""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
  sh:targetClass sh:Shape ;
.
sh:ClassConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasClass ;
.
sh:ClosedConstraintComponent
  sh:shapeValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Predicate {?path} is not allowed (closed shape)" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this (?predicate AS ?path) ?value
		WHERE {
			{
				FILTER ($closed) .
			}
			$this ?predicate ?value .
			FILTER (NOT EXISTS {
				GRAPH $shapesGraph {
					$currentShape sh:property/sh:predicate ?predicate .
				}
			} && (!bound($ignoredProperties) || NOT EXISTS {
				GRAPH $shapesGraph {
					$ignoredProperties rdf:rest*/rdf:first ?predicate .
				}
			}))
		}
""" ;
    ] ;
  sh:targetClass sh:Shape ;
.
sh:DatatypeConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasDatatype ;
.
sh:DerivedValuesConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
.
sh:DisjointConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Property must not share any values with {$disjoint}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value
		WHERE {
			$this $PATH ?value .
			$this $disjoint ?value .
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:EqualsConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Must have same values as {$equals}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value
		WHERE {
			{
				$this $PATH ?value .
				MINUS {
					$this $equals ?value .
				}
			}
			UNION
			{
				$this $equals ?value .
				MINUS {
					$this $PATH ?value .
				}
			}
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:Function
  sh:property [
      sh:predicate dash:cachable ;
      sh:datatype xsd:boolean ;
      sh:description "True to indicate that this function will always return the same values for the same combination of arguments, regardless of the query graphs. Engines can use this information to cache and reuse previous function calls." ;
      sh:maxCount 1 ;
      sh:name "cachable" ;
    ] ;
.
sh:HasValueConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Missing expected value {$hasValue}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this
		WHERE {
			FILTER NOT EXISTS { $this $PATH $hasValue }
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:InConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:targetClass sh:Shape ;
  sh:validator dash:isIn ;
.
sh:LanguageInConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:targetClass sh:Shape ;
  sh:validator dash:isLanguageIn ;
.
sh:LessThanConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Value is not < value of {$lessThan}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value
		WHERE {
			$this $PATH ?value .
			$this $lessThan ?otherValue .
			FILTER (!(?value < ?otherValue)) .
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:LessThanOrEqualsConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Value is not <= value of {$lessThanOrEquals}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value
		WHERE {
			$this $PATH ?value .
			$this $lessThanOrEquals ?otherValue .
			FILTER (!(?value <= ?otherValue)) .
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:MaxCountConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "More than {$maxCount} values" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this
		WHERE {
			$this $PATH ?value .
		}
		GROUP BY $this
		HAVING (COUNT(?value) > $maxCount)
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:MaxExclusiveConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasMaxExclusive ;
.
sh:MaxInclusiveConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasMaxInclusive ;
.
sh:MaxLengthConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasMaxLength ;
.
sh:MinCountConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Less than {$minCount} values" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this
		WHERE {
			OPTIONAL {
				$this $PATH ?value .
			}
		} 
		GROUP BY $this
		HAVING (COUNT(?value) < $minCount)
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:MinExclusiveConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasMinExclusive ;
.
sh:MinInclusiveConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasMinInclusive ;
.
sh:MinLengthConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasMinLength ;
.
sh:NodeKindConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasNodeKind ;
.
sh:NotConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Value does have shape {$not}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value ?failure
		WHERE {
			$this $PATH ?value .
			BIND (sh:hasShape(?value, $not, $shapesGraph) AS ?hasShape) .
			BIND (!bound(?hasShape) AS ?failure) .
			FILTER (?failure || ?hasShape) .
		}
		""" ;
    ] ;
  sh:shapeValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Value does have shape {$not}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ($this AS ?value) ?failure
		WHERE {
			BIND (sh:hasShape($this, $not, $shapesGraph) AS ?hasShape) .
			BIND (!bound(?hasShape) AS ?failure) .
			FILTER (?failure || ?hasShape) .
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
  sh:targetClass sh:Shape ;
.
sh:OrConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value ?failure
		WHERE { 
			$this $PATH ?value .
			BIND (dash:countShapesWithMatchResult(?value, $or, $shapesGraph, true) AS ?count)
			BIND (!bound(?count) AS ?failure) .
			FILTER IF(?failure, true, ?count = 0) .
		}
""" ;
    ] ;
  sh:shapeValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?failure
		WHERE {
			BIND (dash:countShapesWithMatchResult($this, $or, $shapesGraph, true) AS ?count)
			BIND (!bound(?count) AS ?failure) .
			FILTER IF(?failure, true, ?count = 0) .
		}
""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
  sh:targetClass sh:Shape ;
.
sh:PatternConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:validator dash:hasPattern ;
.
sh:QualifiedMaxCountConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "More than {$qualifiedMaxCount} values have shape {$qualifiedValueShape}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
	SELECT $this (SUM(?failed)>0 AS ?failure)
	WHERE {
		{
			$this $PATH ?value .
			BIND  (sh:hasShape(?value, $qualifiedValueShape, $shapesGraph) AS ?hasShape) .
			FILTER (!bound(?hasShape) || ?hasShape) .
		}
		BIND (IF(!bound(?hasShape),1, 0) AS ?failed) .
	} 
	GROUP BY $this
	HAVING ( ( COUNT ( ?value ) > $qualifiedMaxCount ) || ( SUM(?failed) > 0 )) 
""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:QualifiedMinCountConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Less than {$qualifiedMinCount} values have shape {$qualifiedValueShape}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
	SELECT $this (SUM(?failed)>0 AS ?failure)
	WHERE {
		{
			$this $PATH ?value .
			BIND  (sh:hasShape(?value, $qualifiedValueShape, $shapesGraph) AS ?hasShape) .
			FILTER (!bound(?hasShape) || ?hasShape) .
		}
		BIND (IF(!bound(?hasShape),1, 0) AS ?failed) .
	} 
	GROUP BY $this
	HAVING ( ( COUNT ( ?value ) < $qualifiedMinCount ) || ( SUM(?failed) > 0 )) 
""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:ShapeConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Value does not have shape {$shape}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT $this ?value ?failure
		WHERE {
			$this $PATH ?value .
			BIND (sh:hasShape(?value, $shape, $shapesGraph) AS ?hasShape) .
			BIND (!bound(?hasShape) AS ?failure) .
			FILTER (?failure || !?hasShape) .
		}
		""" ;
    ] ;
  sh:shapeValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Value does not have shape {$shape}" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT ($value AS $this) $value ?failure
		WHERE {
			BIND (sh:hasShape($value, $shape, $shapesGraph) AS ?hasShape) .
			BIND (!bound(?hasShape) AS ?failure) .
			FILTER (?failure || !?hasShape) .
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:StemConstraintComponent
  sh:targetClass sh:PropertyConstraint ;
  sh:targetClass sh:Shape ;
  sh:validator dash:hasStem ;
.
sh:UniqueLangConstraintComponent
  sh:propertyValidator [
      rdf:type sh:SPARQLSelectValidator ;
      sh:message "Language \"{?lang}\" used more than once" ;
      sh:prefixes <http://datashapes.org/dash> ;
      sh:select """
		SELECT DISTINCT $this ?lang
		WHERE {
			{
				FILTER ($uniqueLang) .
			}
			$this $PATH ?value .
			BIND (lang(?value) AS ?lang) .
			FILTER (bound(?lang) && ?lang != \"\") . 
			FILTER EXISTS {
				$this $PATH ?otherValue .
				FILTER (?otherValue != ?value && ?lang = lang(?otherValue)) .
			}
		}
		""" ;
    ] ;
  sh:targetClass sh:PropertyConstraint ;
.
sh:derivedValues
  dash:defaultValueType sh:SPARQLValuesDeriver ;
.
sh:filterShape
  dash:defaultValueType sh:Shape ;
.
sh:not
  dash:defaultValueType sh:Shape ;
.
sh:order
  rdfs:range xsd:decimal ;
.
sh:parameter
  dash:defaultValueType sh:Parameter ;
.
sh:property
  dash:defaultValueType sh:PropertyConstraint ;
.
sh:qualifiedValueShape
  dash:defaultValueType sh:Shape ;
.
sh:shape
  dash:defaultValueType sh:Shape ;
.
sh:sparql
  dash:defaultValueType sh:SPARQLConstraint ;
.
