# W3C Shapes Constraint Language (SHACL) Vocabulary
# Draft last edited 2016-09-22

@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vs:      <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd:	 <http://www.w3.org/2001/XMLSchema#> .

@prefix sh: <http://www.w3.org/ns/shacl#> .

sh:
	a owl:Ontology ;
	rdfs:comment """
		This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language.
		This vocabulary is under development by the W3C Data Shapes Working Group.
		The status of each term in this vocabulary is assumed to be <em>stable</em> unless they are marked using
		<a href="http://www.w3.org/2003/06/sw-vocab-status/note">Term-centric Semantic Web Vocabulary Annotations</a>.
		"""^^rdf:HTML ;
	rdfs:label "W3C Shapes Constraint Language (SHACL) Vocabulary" ;
	rdfs:seeAlso
		<https://www.w3.org/2014/data-shapes/wiki/Main_Page> ,
		<http://www.w3.org/TR/2015/WD-shacl-ucr-20150414/> ,
		<http://www.w3.org/TR/2015/WD-shacl-20151008/> ;
	sh:declare [
		sh:prefix "sh" ;
		sh:namespace "http://www.w3.org/ns/shacl#" ;
	] ;
.


# Shapes vocabulary -----------------------------------------------------------

sh:Constraint
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Constraint" ;
	rdfs:comment """
		The class of constraints.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Shape
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:label "Shape" ;
	rdfs:comment """
		The class of SHACL shapes.
		A shape is a grouping of descriptive information and constraints that can be applied to a node in a data graph.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:filterShape
	a rdf:Property ;
	rdfs:label "filter shape" ;
	rdfs:comment """
		This property links a constraint to shapes that the focus nodes need to fulfill before the constraint is evaluated.
		"""^^rdf:HTML ;
	rdfs:domain sh:Constraint ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
.

sh:target
	a rdf:Property ;
	rdfs:label "target" ;
	rdfs:comment """
		This property links a shape to a target.
		The shape must be satisfied by all the nodes represented by the target.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:Target ;
	rdfs:isDefinedBy sh: ;
.

sh:targetClass 
	a rdf:Property ;
	rdfs:label "target class" ;
	rdfs:comment """
		Links a shape to a class.
		The shape must be satisfied by all the instances of the class.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
.

sh:targetNode 
	a rdf:Property ;
	rdfs:label "target node" ;
	rdfs:comment """
		Links a shape to individual nodes.
		The shape must be satisfied by all nodes linked this way.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:isDefinedBy sh: ;
.

sh:targetObjectsOf
	a rdf:Property ;
	rdfs:label "target objects of" ;
	rdfs:comment """
		Links a shape to a property.
		The shape must be satisfied by all objects of triples that have the given property as its predicate.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:targetSubjectsOf
	a rdf:Property ;
	rdfs:label "target subjects of" ;
	rdfs:comment """
		Links a shape to a property.
		The shape must be satisfied by all subjects of triples that have the given property as its predicate.
		"""^^rdf:HTML ;
	rdfs:domain sh:Shape ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.

sh:property
	a rdf:Property ;
	rdfs:comment """
		Links a shape to its property constraints.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "property" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:PropertyConstraint ;
.

sh:PropertyConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:label "Property constraint" ;
	rdfs:comment """
		The class of constraints that are about a given predicate or path starting at the given focus node.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:predicate
	a rdf:Property ;
	rdfs:comment """
		This property is used to specify the predicate of a property constraint.
		Each property constraint must either have a predicate or a path.
		"""^^rdf:HTML ;
	rdfs:label "predicate" ;
	rdfs:domain sh:PropertyConstraint ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.


# Node kind vocabulary --------------------------------------------------------

sh:NodeKind
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Node kind" ;
	rdfs:comment """
		The class of all node kinds. 
		A node is either a
		<code>sh:BlankNode</code>,
		<code>sh:IRI</code>, or
		<code>sh:Literal</code>, or
		one of the combinations thereof:
		<code>sh:BlankNodeOrIRI</code>,
		<code>sh:BlankNodeOrLiteral</code>,
		<code>sh:IRIOrLiteral</code>.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:BlankNode
	a sh:NodeKind ;
	rdfs:label "Blank node" ;
	rdfs:comment "The node kind of all blank nodes." ;
	rdfs:isDefinedBy sh: ;
.

sh:BlankNodeOrIRI
	a sh:NodeKind ;
	rdfs:label "Blank node or IRI" ;
	rdfs:comment "The node kind of all blank nodes or IRIs." ;
	rdfs:isDefinedBy sh: ;
.

sh:BlankNodeOrLiteral
	a sh:NodeKind ;
	rdfs:label "Blank node or Literal" ;
	rdfs:comment "The node kind of all blank nodes or Literals." ;
	rdfs:isDefinedBy sh: ;
.

sh:IRI
	a sh:NodeKind ;
	rdfs:label "IRI" ;
	rdfs:comment "The node kind of all IRIs." ;
	rdfs:isDefinedBy sh: ;
.

sh:IRIOrLiteral
	a sh:NodeKind ;
	rdfs:label "IRI or Literal" ;
	rdfs:comment "The node kind of all IRIs or Literals." ;
	rdfs:isDefinedBy sh: ;
.

sh:Literal
	a sh:NodeKind ;
	rdfs:label "Literal" ;
	rdfs:comment "The node kind of all literals." ;
	rdfs:isDefinedBy sh: ;
.


# Results vocabulary ----------------------------------------------------------

sh:AbstractResult
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Abstract Result" ;
	rdfs:comment "Instances of subclasses of this class can be constructed during constraint validation." ;
	rdfs:isDefinedBy sh: ;
.

sh:ValidationResult
	a rdfs:Class ;
	rdfs:subClassOf sh:AbstractResult ;
	rdfs:label "Validation Result" ;
	rdfs:comment """
		The class of all validation results.
		A SHACL validator takes as input a shapes graph and a data graph, and produces as output a results graph.
		The data graph satisfies the shapes graph if and only if the results graph contains no violation-level validation results.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Severity
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Severity" ;
	rdfs:comment """
		The class of all validation result severity levels.
		A severity level is
		<code>sh:Info</code>,
		<code>sh:Warning</code>, or
		<code>sh:Violation</code>.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Info
	a sh:Severity ;
	rdfs:label "Info" ;
	rdfs:comment """
		The severity for an informational validation result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Violation
	a sh:Severity ;
	rdfs:label "Violation" ;
	rdfs:comment """
		The severity for a violation validation result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:Warning
	a sh:Severity ;
	rdfs:label "Warning" ;
	rdfs:comment """
		The severity for a warning validation result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:detail
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:AbstractResult ;
	rdfs:label "detail" ;
	rdfs:comment """
		Can link a result with other results that provide more details.
		This is especially useful to describe violations against nested patterns or shapes.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:focusNode
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "focus node" ;
	rdfs:comment "The focus node evaluated when the result was produced." ;
	rdfs:isDefinedBy sh: ;
.

sh:message
	a rdf:Property ;
	# rdfs:domain: sh:AbstractResult or sh:SPARQLConstraint or sh:SPARQLSelectValidator or sh:SPARQLAskValidator
	# rdfs:range: sh:datatypeIn ( xsd:string rdf:langString ) ;
	rdfs:label "message" ;
	rdfs:comment """
		A human-readable message (possibly with placeholders for variables) explaining the cause of the result.
		Multiple values are possible assuming they have different languages.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.
	
sh:severity
	a rdf:Property ;
	# rdfs:domain: sh:AbstractResult or sh:Constraint
	rdfs:range sh:Severity ;
	rdfs:label "severity" ;
	rdfs:comment """
		The severity of the result.
		When used at constraints, this defines the severity that produced results shall have.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:sourceConstraint
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:Constraint ;
	rdfs:label "source constraint" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the constraint that is the source of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:sourceShape
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:Shape ;
	rdfs:label "source shape" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the shape that is the source of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:sourceConstraintComponent
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:ConstraintComponent ;
	rdfs:label "source constraint component" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with the constraint component that is the source of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:value
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "value" ;
	rdfs:comment """
		This property is a validation result attribute.
		It links a validation result with an RDF node that is represents the value of the result.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.


# SPARQL execution support ----------------------------------------------------

sh:SPARQLExecutable
	a rdfs:Class ;
	rdfs:label "SPARQL executable" ;
	rdfs:comment """
		Class of resources that encapsulate a SPARQL query.
		This class may also be used to declare other properties required by SPARQL engines.
		"""^^rdf:HTML ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLAskExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL ASK executable" ;
.

sh:ask
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLAskExecutable ;
	rdfs:label "ask" ;
	rdfs:comment "The SPARQL ASK query to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLConstructExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL CONSTRUCT executable" ;
.

sh:construct
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLConstructExecutable ;
	rdfs:label "construct" ;
	rdfs:comment "The SPARQL CONSTRUCT query to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLSelectExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL SELECT executable" ;
.

sh:select
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLSelectExecutable ;
	rdfs:label "select" ;
	rdfs:comment "The SPARQL SELECT query to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLUpdateExecutable
	a rdfs:Class ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL UPDATE executable" ;
.

sh:update
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLUpdateExecutable ;
	rdfs:label "update" ;
	rdfs:comment "The SPARQL UPDATE to execute." ;
	rdfs:isDefinedBy sh: ;
.

sh:prefixes
	a rdf:Property ;
	rdfs:domain sh:SPARQLExecutable ;
	rdfs:range owl:Ontology ;
	rdfs:label "prefixes" ;
	rdfs:comment "Links a SPARQL query with the prefixes that shall be applied before parsing." ;
.

sh:PrefixDeclaration
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Prefix declaration" ;
	rdfs:comment "Class of prefix declarations, consisting of values for sh:prefix and sh:namespace." ;
.

sh:declare
	a rdf:Property ;
	rdfs:domain owl:Ontology ;
	rdfs:range sh:PrefixDeclaration ;
	rdfs:label "declare" ;
	rdfs:comment "Points at a namespace prefix declaration." ;
	rdfs:isDefinedBy sh: ;
.

sh:prefix
	a rdf:Property ;
	rdfs:domain sh:PrefixDeclaration ;
	rdfs:range xsd:string ;
	rdfs:label "prefix" ;
	rdfs:comment "A prefix string." ;
	rdfs:isDefinedBy sh: ;
.

sh:namespace
	a rdf:Property ;
	rdfs:domain sh:PrefixDeclaration ;
	rdfs:range xsd:anyURI ;
	rdfs:label "namespace" ;
	rdfs:comment "The namespace associated with a prefix." ;
	rdfs:isDefinedBy sh: ;
.


# Target vocabulary -----------------------------------------------------------

sh:Target
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Target" ;
	rdfs:comment """
		The class of targets.
		A target defines a set of nodes in the data graph.
		Each node in the target of a shape becomes the focus node for each constraint in the shape when at SHACL validator validates a data graph against a shapes graph.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLTarget
	a rdfs:Class ;
	rdfs:subClassOf sh:Target ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL target" ;
	rdfs:comment """
		A target that has a SPARQL SELECT query attached to it.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:TargetType
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Class ;
	rdfs:subClassOf sh:Parameterizable ;
	rdfs:label "Target type" ;
	rdfs:comment """
		The (meta) class for parameterizable targets.
		Instances of this are instantiated as values of <code>sh:target</code>.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
.

sh:SPARQLTargetType
	a rdfs:Class ;
	rdfs:subClassOf sh:TargetType ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL target type" ;
	rdfs:comment """
		The (meta) class for parameterizable targets that are backed by a SPARQL SELECT query.
		"""^^rdf:HTML ;
.



# Path vocabulary -------------------------------------------------------------

sh:path
	a rdf:Property ;
	rdfs:comment """
		This property is used to specify a path in constraints.
		The values are either:
		<ul>
			<li>nodes that are rdf:Lists (for sequence paths)</li>
			<li>nodes with exactly one value for either sh:inversePath, sh:alternativePath, sh:zeroOrMorePath, sh:oneOrMorePath or sh:zeroOrOnePath</li>
			<li>IRIs (for a single predicate path)</li>
		</ul>
		"""^^rdf:HTML ;
	rdfs:label "path" ;
	rdfs:domain sh:PathConstraint ;
	rdfs:range rdfs:Resource ;
	rdfs:isDefinedBy sh: ;
.

sh:inversePath
	a rdf:Property ;
	rdfs:label "inverse path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 InversePath.
		The (single) value of this property represents an inverse path (object to subject).
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.

sh:alternativePath
	a rdf:Property ;
	rdfs:label "alternative path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 AlternativePath.
		The (single) value of this property must be an rdf:List of path elements.
		"""^^rdf:HTML ;
	rdfs:range rdfs:List ;
.

sh:zeroOrMorePath
	a rdf:Property ;
	rdfs:label "zero or more path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 ZeroOrMorePath.
		The (single) value of this property represents a path that is matched zero or more times.
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.

sh:oneOrMorePath
	a rdf:Property ;
	rdfs:label "one or more path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 OneOrMorePath.
		The (single) value of this property represents a path that is matched one or more times.
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.

sh:zeroOrOnePath
	a rdf:Property ;
	rdfs:label "zero or one path" ;
	rdfs:comment """
		Represents a SPARQL 1.1 ZeroOrOnePath.
		The (single) value of this property represents a path that is matched zero or one times.
		"""^^rdf:HTML ;
	rdfs:range rdfs:Resource ;
.


# Parameters metamodel --------------------------------------------------------

sh:Parameterizable
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Parameterizable" ;
	rdfs:comment """
		Superclass of components that can take parameters, especially Functions and ConstraintComponents.
		Parameters are declared using instances of sh:Parameter via the property sh:parameter.
		"""^^rdf:HTML ;
.

sh:parameter
	a rdf:Property ;
	rdfs:label "parameter" ;
	rdfs:comment """
		Links a <code>sh:Parameterizable</code> with instances of <code>sh:Parameter</code>.
		"""^^rdf:HTML ;
	rdfs:domain sh:Parameterizable ;
	rdfs:range sh:Parameter ;
.

sh:labelTemplate
	a rdf:Property ;
	rdfs:label "label template" ;
	rdfs:comment """
		Outlines how human-readable labels of instances of the associated sh:Parameterizable shall be produced.
		The values must be strings that can contain {?paramName} as placeholders for the actual values of the given parameter.
		There may be multiple values, for different languages.
		"""^^rdf:HTML ;
	rdfs:domain sh:Parameterizable ;
	# range: sh:datatypeIn ( xsd:string rdf:langString ) ;
.

sh:Parameter
	a rdfs:Class ;
	rdfs:subClassOf sh:PropertyConstraint ;
	rdfs:label "Parameter" ;
	rdfs:comment """
		Instances of this class define a parameter, possibly together with information about allowed value type, cardinality and other characteristics.
		"""^^rdf:HTML ;
.

sh:optional
	a rdf:Property ;
	rdfs:label "optional" ;
	rdfs:comment """
		Indicates whether a parameter is optional.
		If set to true, then a Parameterizable can be executed even if it has no value for the Parameter.
		"""^^rdf:HTML ;
	rdfs:domain sh:Parameter ;
	rdfs:range xsd:boolean ;
.


# Constraint components metamodel ---------------------------------------------

sh:ConstraintComponent
	a rdfs:Class ;
	rdfs:subClassOf sh:Parameterizable ;
	rdfs:label "Constraint component" ;
	rdfs:comment """
		The class of constraint components such as <code>sh:PatternConstraintComponent</code>.
		Constraint components serve as containers to group together the properties used in a constraint,
		for example <code>sh:pattern</code> and <code>sh:flags</code>.
		These properties can be linked to the constraint component via <code>sh:parameter</code>.
		Constraint components can also have links to validators (e.g. in SPARQL) that can be discovered by implementations,
		using the properties <code>sh:validator</code>, <code>sh:shapeValidator</code> and <code>sh:propertyValidator</code>.
		"""^^rdf:HTML ;
.

sh:validator
	a rdf:Property ;
	rdfs:label "validator" ;
	rdfs:comment """
		The validator(s) used to evaluate either node or property constraints.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range sh:Validator ;
.

sh:shapeValidator
	a rdf:Property ;
	rdfs:label "shape validator" ;
	rdfs:comment """
		The validator(s) used to evaluate a constraint component in the context of a shape.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range sh:Validator ;
.

sh:propertyValidator
	a rdf:Property ;
	rdfs:label "property validator" ;
	rdfs:comment """
		The validator(s) used to evaluate a constraint component in the context of a property constraints.
		"""^^rdf:HTML ;
	rdfs:domain sh:ConstraintComponent ;
	rdfs:range sh:Validator ;
.

sh:Validator
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Validator" ;
	rdfs:comment """
		A validator provides instructions on how to process a constraint definition.
		This class serves as base class for the SPARQL-based validators and other possible implementations.
		"""^^rdf:HTML ;
.

sh:SPARQLAskValidator
	a rdfs:Class ;
	rdfs:subClassOf sh:Validator ;
	rdfs:subClassOf sh:SPARQLAskExecutable ;
	rdfs:label "SPARQL ASK validator" ;
	rdfs:comment """
		A sh:Validator based on a SPARQL ASK query, represented using <code>sh:ask</code>.
		The query is evaluated for each value node and is supposed to return <code>true</code> if
		the given node is valid.
		"""^^rdf:HTML ;
.

sh:SPARQLSelectValidator
	a rdfs:Class ;
	rdfs:subClassOf sh:Validator ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL SELECT validator" ;
	rdfs:comment """
		A sh:Validator based on a SPARQL SELECT query, represented using <code>sh:select</code>.
		"""^^rdf:HTML ;
.

sh:SPARQLConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL constraint" ;
	rdfs:comment """
		A constraint based on a SPARQL query, via <code>sh:select</code>.
		Instances of this class are directly associated with a shape using <code>sh:sparql</code>.
		"""^^rdf:HTML ;
.

sh:sparql
	a rdf:Property ;
	rdfs:label "SPARQL constraint" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:SPARQLConstraint ;
.


# Library of Core Constraint Components and their properties ------------------

sh:AndConstraintComponent
	a sh:ConstraintComponent ;
	rdfs:label "And constraint component" ;
	rdfs:comment """
		This constraint component can be used to describe the intersection of multiple shapes.
		The parameter <code>sh:and</code> points at a list of <code>sh:Shape</code> instances.
		Valid nodes must validate successfully against all shapes in the list.
		"""^^rdf:HTML ;
	sh:parameter sh:AndConstraintComponent-and ;
.

sh:AndConstraintComponent-and
	a sh:Parameter ;
	sh:predicate sh:and ;
.

sh:and
	a rdf:Property ;
	rdfs:label "and" ;
	rdfs:comment """
		Links a constraint with a list of shapes.
		"""^^rdf:HTML ;
	rdfs:range rdf:List ;
	rdfs:isDefinedBy sh: ;
.


sh:ClassConstraintComponent 
	a sh:ConstraintComponent ;
	rdfs:label "Class constraint component" ;
	sh:parameter sh:ClassConstraintComponent-class ;
.

sh:ClassConstraintComponent-class
	a sh:Parameter ;
	sh:predicate sh:class ;
.

sh:class
	a rdf:Property ;
	rdfs:label "class" ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
.


sh:ClosedConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:ClosedConstraintComponent-closed ;
	sh:parameter sh:ClosedConstraintComponent-ignoredProperties ;
.

sh:ClosedConstraintComponent-closed
	a sh:Parameter ; 
	sh:predicate sh:closed ;
.

sh:ClosedConstraintComponent-ignoredProperties
	a sh:Parameter ;
	sh:predicate sh:ignoredProperties ;
	sh:optional true ;
.

sh:closed
	a rdf:Property ;
	rdfs:label "closed" ;
	rdfs:range xsd:boolean ;
	rdfs:isDefinedBy sh: ;
.

sh:ignoredProperties
	a rdf:Property ;
	rdfs:label "ignored properties" ;
	rdfs:range rdf:List ;    # members: rdf:Property
	rdfs:isDefinedBy sh: ;
.


sh:DatatypeConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:DatatypeConstraintComponent-datatype ;
.

sh:DatatypeConstraintComponent-datatype
	a sh:Parameter ;
	sh:predicate sh:datatype ;
.

sh:datatype
	a rdf:Property ;
	rdfs:comment """
		Specifies an RDF datatype that all value nodes must have.
		"""^^rdf:HTML ;
	rdfs:label "datatype" ;
	rdfs:range rdfs:Datatype ;
	rdfs:isDefinedBy sh: ;
.


sh:DisjointConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:DisjointConstraintComponent-disjoint ;
.

sh:DisjointConstraintComponent-disjoint
	a sh:Parameter ;
	sh:predicate sh:disjoint ;
.

sh:disjoint
	a rdf:Property ;
	rdfs:label "disjoint" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.


sh:EqualsConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:EqualsConstraintComponent-equals ;
.

sh:EqualsConstraintComponent-equals
	a sh:Parameter ;
	sh:predicate sh:equals ;
.

sh:equals
	a rdf:Property ;
	rdfs:label "equals" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.


sh:HasValueConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:HasValueConstraintComponent-hasValue ;
.

sh:HasValueConstraintComponent-hasValue
	a sh:Parameter ;
	sh:predicate sh:hasValue ;
.

sh:hasValue
	a rdf:Property ;
	rdfs:comment """
		Specifies a value that must be among the value nodes.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "hasValue" ;
.


sh:InConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:InConstraintComponent-in ;
.

sh:InConstraintComponent-in
	a sh:Parameter ;
	sh:predicate sh:in ;
.

sh:in
	a rdf:Property ;
	rdfs:comment """
		Specifies a list of allowed values.
		Each value node must be among the members of the given list.
		"""^^rdf:HTML ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "in" ;
	rdfs:range rdf:List ;
.


sh:LanguageInConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:LanguageInConstraintComponent-languageIn ;
.

sh:LanguageInConstraintComponent-languageIn
	a sh:Parameter ;
	sh:predicate sh:languageIn ;
.

sh:languageIn
	a rdf:Property ;
	rdfs:label "language in" ;
	rdfs:comment """
		Specifies a list of language tags that all value nodes must have.
		"""^^rdf:HTML ;
	rdfs:range rdf:List ;   # members: xsd:string
.


sh:LessThanConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:LessThanConstraintComponent-lessThan ;
.

sh:LessThanConstraintComponent-lessThan
	a sh:Parameter ;
	sh:predicate sh:lessThan ;
.

sh:lessThan
	a rdf:Property ;
	rdfs:label "less than" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.


sh:LessThanOrEqualsConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:LessThanOrEqualsConstraintComponent-lessThanOrEquals ;
.

sh:LessThanOrEqualsConstraintComponent-lessThanOrEquals
	a sh:Parameter ;
	sh:predicate sh:lessThanOrEquals ;
.

sh:lessThanOrEquals
	a rdf:Property ;
	rdfs:label "less than or equals" ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
.


sh:MaxCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MaxCountConstraintComponent-maxCount ;
.

sh:MaxCountConstraintComponent-maxCount
	a sh:Parameter ;
	sh:predicate sh:maxCount ;
	sh:datatype xsd:integer ;
.

sh:maxCount
	a rdf:Property ;
	rdfs:comment """
		Specifies the maximum number of values in the set of value nodes.
		"""^^rdf:HTML ;
	rdfs:label "max count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.


sh:MaxExclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MaxExclusiveConstraintComponent-maxExclusive ;
.

sh:MaxExclusiveConstraintComponent-maxExclusive
	a sh:Parameter ;
	sh:predicate sh:maxExclusive ;
	sh:nodeKind sh:Literal ;
.

sh:maxExclusive
	a rdf:Property ;
	rdfs:comment """
		Specifies the maximum exclusive value of each value node.
		"""^^rdf:HTML ;
	rdfs:label "max exclusive" ;
	rdfs:isDefinedBy sh: ;
.


sh:MaxInclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MaxInclusiveConstraintComponent-maxInclusive ;
.

sh:MaxInclusiveConstraintComponent-maxInclusive
	a sh:Parameter ;
	sh:predicate sh:maxInclusive ;
	sh:nodeKind sh:Literal ;
.

sh:maxInclusive
	a rdf:Property ;
	rdfs:comment """
		Specifies the maximum inclusive value of each value node.
		"""^^rdf:HTML ;
	rdfs:label "max inclusive" ;
	rdfs:isDefinedBy sh: ;
.


sh:MaxLengthConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MaxLengthConstraintComponent-maxLength ;
.

sh:MaxLengthConstraintComponent-maxLength
	a sh:Parameter ;
	sh:predicate sh:maxLength ;
	sh:datatype xsd:integer ;
.

sh:maxLength
	a rdf:Property ;
	rdfs:comment """
		Specifies the maximum string length of each value node.
		"""^^rdf:HTML ;
	rdfs:label "max length" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.


sh:MinCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MinCountConstraintComponent-minCount ;
.

sh:MinCountConstraintComponent-minCount
	a sh:Parameter ;
	sh:predicate sh:minCount ;
	sh:datatype xsd:integer ;
.

sh:minCount
	a rdf:Property ;
	rdfs:comment """
		Specifies the minimum number of values in the set of value nodes.
		"""^^rdf:HTML ;
	rdfs:label "min count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.


sh:MinExclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MinExclusiveConstraintComponent-minExclusive ;
.

sh:MinExclusiveConstraintComponent-minExclusive
	a sh:Parameter ;
	sh:predicate sh:minExclusive ;
	sh:nodeKind sh:Literal ;
.

sh:minExclusive
	a rdf:Property ;
	rdfs:comment """
		Specifies the minimum exclusive value of each value node.
		"""^^rdf:HTML ;
	rdfs:label "min exclusive" ;
	rdfs:isDefinedBy sh: ;
.


sh:MinInclusiveConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MinInclusiveConstraintComponent-minInclusive ;
.

sh:MinInclusiveConstraintComponent-minInclusive
	a sh:Parameter ;
	sh:predicate sh:minInclusive ;
	sh:nodeKind sh:Literal ;
.

sh:minInclusive
	a rdf:Property ;
	rdfs:comment """
		Specifies the minimum inclusive value of each value node.
		"""^^rdf:HTML ;
	rdfs:label "min inclusive" ;
	rdfs:isDefinedBy sh: ;
.


sh:MinLengthConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:MinLengthConstraintComponent-minLength ;
.

sh:MinLengthConstraintComponent-minLength
	a sh:Parameter ;
	sh:predicate sh:minLength ;
	sh:datatype xsd:integer ;
.

sh:minLength
	a rdf:Property ;
	rdfs:comment """
		Specifies the minimum string length of each value node.
		"""^^rdf:HTML ;
	rdfs:label "min length" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.


sh:NodeKindConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:NodeKindConstraintComponent-nodeKind ;
.

sh:NodeKindConstraintComponent-nodeKind
	a sh:Parameter ;
	sh:predicate sh:nodeKind ;
	sh:class sh:NodeKind ;
	sh:in ( sh:BlankNode sh:IRI sh:Literal sh:BlankNodeOrIRI sh:BlankNodeOrLiteral sh:IRIOrLiteral ) ;
.

sh:nodeKind
	a rdf:Property ;
	rdfs:comment """
		Specifies the node kind (e.g. IRI or Literal) each value node.
		"""^^rdf:HTML ;
	rdfs:label "node kind" ;
	rdfs:range sh:NodeKind ;
	rdfs:isDefinedBy sh: ;
.


sh:NotConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:NotConstraintComponent-not ;
.

sh:NotConstraintComponent-not
	a sh:Parameter ;
	sh:predicate sh:not ;
.

sh:not
	a rdf:Property ;
	rdfs:label "not" ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
.


sh:OrConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:OrConstraintComponent-or ;
.

sh:OrConstraintComponent-or
	a sh:Parameter ;
	sh:predicate sh:or ;
.

sh:or
	a rdf:Property ;
	rdfs:label "or" ;
	rdfs:range rdf:List ;    # members: sh:Shape ;
	rdfs:isDefinedBy sh: ;
.


sh:PatternConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:PatternConstraintComponent-pattern ;
	sh:parameter sh:PatternConstraintComponent-flags ;
.

sh:PatternConstraintComponent-pattern
	a sh:Parameter ;
	sh:predicate sh:pattern ;
	sh:datatype xsd:string ;
	sh:order 0 ;
.

sh:PatternConstraintComponent-flags
	a sh:Parameter ;
	sh:predicate sh:flags ;
	sh:datatype xsd:string ;
	sh:optional true ;
	sh:order 1 ;
.

sh:flags
	a rdf:Property ;
	rdfs:label "flags" ;
	rdfs:comment """
		This property is an optional constraint parameter that defines flags to be used with regular expression pattern matching.
		When present it requires the presence of <code>sh:pattern</code>.
		Its syntax is the same as that used by the SPARQL <code>REGEX()</code> function.
		The constraint is violated when any value node fails to match the regular expression defined
		by the pattern and modified by the flags.
		"""^^rdf:HTML ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
.

sh:pattern
	a rdf:Property ;
	rdfs:comment """
		This property specifies a regular expression pattern in the same syntax as that defined for the SPARQL <code>REGEX()</code> function.
		If the property <code>sh:flags</code> is present then its value defines flags to be used for pattern matching.
		The constraint is violated if some value node does not match the regular expression.
		"""^^rdf:HTML ;
	rdfs:label "pattern" ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
.


sh:StemConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:StemConstraintComponent-stem ;
.

sh:StemConstraintComponent-stem
	a sh:Parameter ;
	sh:predicate sh:stem ;
	sh:datatype xsd:string ;
.

sh:stem
	a rdf:Property ;
	rdfs:comment """
		Specifies a string value that the IRI of the value nodes must start with.
		"""^^rdf:HTML ;
	rdfs:label "stem" ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
.


sh:QualifiedMaxCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:QualifiedMaxCountConstraintComponent-qualifiedMaxCount ;
	sh:parameter sh:QualifiedMaxCountConstraintComponent-qualifiedValueShape ;
.

sh:QualifiedMaxCountConstraintComponent-qualifiedMaxCount
	a sh:Parameter ;
	sh:predicate sh:qualifiedMaxCount ;
	sh:datatype xsd:integer ;
.

sh:QualifiedMaxCountConstraintComponent-qualifiedValueShape
	a sh:Parameter ;
	sh:predicate sh:qualifiedValueShape ;
.


sh:QualifiedMinCountConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:QualifiedMinCountConstraintComponent-qualifiedMinCount ;
	sh:parameter sh:QualifiedMinCountConstraintComponent-qualifiedValueShape ;
.

sh:QualifiedMinCountConstraintComponent-qualifiedMinCount
	a sh:Parameter ;
	sh:predicate sh:qualifiedMinCount ;
	sh:datatype xsd:integer ;
.

sh:QualifiedMinCountConstraintComponent-qualifiedValueShape
	a sh:Parameter ;
	sh:predicate sh:qualifiedValueShape ;
.

sh:qualifiedMaxCount
	a rdf:Property ;
	rdfs:label "qualified max count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:qualifiedMinCount
	a rdf:Property ;
	rdfs:label "qualified min count" ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:qualifiedValueShape
	a rdf:Property ;
	rdfs:comment """
		This property specifies a value shape.
		It requires the presence of <code>sh:qualifiedMaxCount</code> and/or <code>sh:qualifiedMinCount></code>.
		The constraint is violated if the number of value nodes that satisfy the value shape is less than the minimum
		or greater than the maximum.
		"""^^rdf:HTML ;
	rdfs:label "qualified value shape" ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
.


sh:ShapeConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:ShapeConstraintComponent-shape ;
.

sh:ShapeConstraintComponent-shape
	a sh:Parameter ;
	sh:predicate sh:shape ;
.

sh:shape
	a rdf:Property ;
	rdfs:label "shape" ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
.


sh:UniqueLangConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter sh:UniqueLangConstraintComponent-uniqueLang ;
.

sh:UniqueLangConstraintComponent-uniqueLang
	a sh:Parameter ;
	sh:predicate sh:uniqueLang ;
	sh:datatype xsd:boolean ;
.

sh:uniqueLang
	a rdf:Property ;
	rdfs:comment """
		Specifies whether all values in the set of node values must have a unique language tag.
		The constraint is violated if the boolean value is <code>true</code>
		and two or more value nodes have the same language tags.
		"""^^rdf:HTML ;
	rdfs:label "unique lang" ;
	rdfs:range xsd:boolean ;
	rdfs:isDefinedBy sh: ;
.


# Derived Values support ------------------------------------------------------

sh:DerivedValuesConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter [
		sh:predicate sh:derivedValues ;
		sh:class sh:ValuesDeriver ;
		sh:name "derived values" ;
		sh:description """
			Points at an object that wraps an executable body (e.g. a SPARQL query)
			that computes all values for the given property.
			"""^^rdf:HTML ;
	] ;
.

sh:derivedValues
	a rdf:Property ;
	rdfs:label "derived values" ;
	rdfs:comment """
		Links a constraint with a <code>sh:ValuesDeriver</code> used to compute the property values.
		"""^^rdf:HTML ;
	rdfs:range sh:ValuesDeriver ;
.

sh:ValuesDeriver
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Values deriver" ;
	rdfs:comment """
		The class of objects that can be used to derive values in conjunction with <code>sh:derivedValues</code>.
		SHACL only defines a single subclass, <code>sh:SPARQLValuesDeriver</code>, but this is an extension point.
		"""^^rdf:HTML ;
.

sh:SPARQLValuesDeriver
	a rdfs:Class ;
	rdfs:subClassOf sh:ValuesDeriver ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:label "SPARQL values deriver" ;
.


# Non-validating constraint properties ----------------------------------------

sh:defaultValue
	a rdf:Property ;
	rdfs:label "default value" ;
	rdfs:domain sh:PropertyConstraint ;
	rdfs:isDefinedBy sh: ;
.

sh:description
	a rdf:Property ;
	rdfs:label "description" ;
	rdfs:domain sh:PropertyConstraint ;
	# rdfs:range: xsd:string or rdf:langString
	rdfs:isDefinedBy sh: ;
.

sh:group
	a rdf:Property ;
	rdfs:label "group" ;
	rdfs:domain sh:PropertyConstraint ;
	rdfs:range sh:PropertyGroup ;
	rdfs:isDefinedBy sh: ;
.

sh:name
	a rdf:Property ;
	rdfs:label "name" ;
	rdfs:domain sh:PropertyConstraint ;
	# rdfs:range: xsd:string or rdf:langString
	rdfs:isDefinedBy sh: ;
.

sh:order
	a rdf:Property ;
	rdfs:label "order" ;
	# rdfs:domain sh:Constraint or sh:PropertyGroup
	# rdfs:range xsd:decimal or xsd:integer ;
	rdfs:isDefinedBy sh: ;
.

sh:PropertyGroup
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Property group" ;
	rdfs:comment "Instances of this class represent groups of property constraints that belong together." ;
	rdfs:isDefinedBy sh: ;
.


# Functions Vocabulary --------------------------------------------------------

sh:Function
	a rdfs:Class ;
	rdfs:subClassOf sh:Parameterizable ;
	rdfs:label "Function" ;
	rdfs:comment """
		An object implementing a function that may take parameters, implemented in an executable language such as SPARQL.
		"""^^rdf:HTML ;
.

sh:returnType
	a rdf:Property ;
	rdfs:label "return type" ;
	rdfs:comment """
		The expected type of values returned by the associated function.
		"""^^rdf:HTML ;
	rdfs:domain sh:Function ;
	rdfs:range rdfs:Class ;
.

sh:SPARQLFunction
	a rdfs:Class ;
	rdfs:subClassOf sh:Function ;
	rdfs:subClassOf sh:SPARQLAskExecutable ;
	rdfs:subClassOf sh:SPARQLSelectExecutable ;
	rdfs:comment "A Function backed by a SPARQL query - either ASK or SELECT." ;
.

sh:hasShape
	a sh:Function ;
	rdfs:label "has shape" ;
	rdfs:comment """
		A built-in function of the SHACL SPARQL extension mechanism.
		Can be used to validate a given (focus) node against a given shape,
		returning <code>true</code> if the node is valid.
		"""^^rdf:HTML ;
	sh:returnType xsd:boolean ;
	sh:parameter [
		sh:predicate sh:node ;
		sh:description "The node to validate." ;
	] ;
	sh:parameter [
		sh:predicate sh:shape ;
		sh:description "The shape that the node is supposed to have." ;
	] ;
	sh:parameter [
		sh:predicate sh:shapesGraph ;
		sh:description "The shapes graph to operate on.";
	] ;
.

# Result Annotations ----------------------------------------------------------

sh:resultAnnotation
	a rdf:Property ;
	rdfs:label "result annotation" ;
	rdfs:comment """
		Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query.
		"""^^rdf:HTML ;
	rdfs:domain sh:SPARQLSelectValidator ;
	rdfs:range sh:ResultAnnotation ;
.

sh:ResultAnnotation
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Result annotation" ;
	rdfs:comment "Defines the rules to derive the values of a given annotation property as extra values for a constraint violation." ;
	rdfs:isDefinedBy sh: ;
.

sh:annotationProperty
	a rdf:Property ;
	rdfs:label "annotation property" ;
	rdfs:comment "The annotation property that shall be set." ;
	rdfs:domain sh:ResultAnnotation ;
	rdfs:range rdf:Property ;
.

sh:annotationValue
	a rdf:Property ;
	rdfs:label "annotation value" ;
	rdfs:comment "The values of the annotation property." ;
	rdfs:domain sh:ResultAnnotation ;
.

sh:annotationVarName
	a rdf:Property ;
	rdfs:label "annotation variable name" ;
	rdfs:comment "The name of the SPARQL variable from the SELECT clause that shall be used for the values." ;
	rdfs:domain sh:ResultAnnotation ;
	rdfs:range xsd:string ;
.
